<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法技巧与模板的集合</title>
    <link href="/2021/06/29/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <url>/2021/06/29/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="算法技巧与模板的集合"><a href="#算法技巧与模板的集合" class="headerlink" title="算法技巧与模板的集合"></a>算法技巧与模板的集合</h1><blockquote><p>本文将以Acwing<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="来自 AcWing算法基础课">[1]</span></a></sup>，OI Wiki<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="OI Wiki / GitHub Repository">[2]</span></a></sup>，《算法竞赛进阶指南》<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="《算法竞赛进阶指南》 李煜东著  2018年1月第1版  2020年8月第6次印刷">[3]</span></a></sup>等资料上的算法模板为基础，整理OI竞赛常用的算法技巧与模板（不给出思路与推导）</p><p>挖个大坑，持续更新~</p><p>update on 2021/8/12</p></blockquote><h1 id="重点语法"><a href="#重点语法" class="headerlink" title="重点语法"></a>重点语法</h1><h2 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h2><blockquote><p>个人不推荐使用 <code>#include &lt;bits/stdc++.h&gt;</code> ，因为这样会造成奇奇怪怪的变量错误，例如 <code>cmath</code> 库中定义了 <code>y1</code> ，<code>y2</code> 的变量名</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><blockquote><p>主要介绍常用数据类型所占的字节大小与取值范围<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="摘自 C/C++中基本数据类型所占内存大小_ZMyths的博客">[8]</span></a></sup></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">32位</th><th style="text-align:center">64位</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">-128~127</td></tr><tr><td style="text-align:center">unsigned char</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0~255</td></tr><tr><td style="text-align:center">short int / short</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">–32,768~32,767</td></tr><tr><td style="text-align:center">unsigned short</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">0~65,535</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648~2,147,483,647</td></tr><tr><td style="text-align:center">unsigned int</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">0~4,294,967,295</td></tr><tr><td style="text-align:center">long int / long</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">–2,147,483,648~2,147,483,647</td></tr><tr><td style="text-align:center">unsigned long</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center">0~4,294,967,295</td></tr><tr><td style="text-align:center">long long int / long long</td><td style="text-align:center">8</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808~9,223,372,036,854,775,807</td></tr><tr><td style="text-align:center">指针</td><td style="text-align:center">4</td><td style="text-align:center">8</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">3.4E +/- 38 (7 digits)</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">8</td><td style="text-align:center">1.7E +/- 308 (15 digits)</td></tr></tbody></table></div><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h3 id="迭代器遍历（适用于不支持随机访问的容器）"><a href="#迭代器遍历（适用于不支持随机访问的容器）" class="headerlink" title="迭代器遍历（适用于不支持随机访问的容器）"></a>迭代器遍历（适用于不支持随机访问的容器）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// e.g.</span><br><span class="hljs-keyword">for</span> (set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = num.<span class="hljs-built_in">begin</span>(); it != num.<span class="hljs-built_in">end</span>(); it ++ ) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="非算法技巧"><a href="#非算法技巧" class="headerlink" title="非算法技巧"></a>非算法技巧</h1><h2 id="顺序读取正整数的每一位"><a href="#顺序读取正整数的每一位" class="headerlink" title="顺序读取正整数的每一位"></a>顺序读取正整数的每一位</h2><h3 id="Method-1-逐位计算"><a href="#Method-1-逐位计算" class="headerlink" title="Method 1 逐位计算"></a>Method 1 逐位计算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rln</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t = x % <span class="hljs-number">10</span>;<br>    x /= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Method-2-转字符串处理"><a href="#Method-2-转字符串处理" class="headerlink" title="Method 2 转字符串处理"></a>Method 2 转字符串处理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// x存为string</span><br><span class="hljs-comment">// i表示x从右向左的第i位</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rln</span><span class="hljs-params">(string x, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x[x.<span class="hljs-built_in">size</span>() - i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="坐标数组"><a href="#坐标数组" class="headerlink" title="坐标数组"></a>坐标数组</h2><h3 id="Step-1-定义"><a href="#Step-1-定义" class="headerlink" title="Step 1 定义"></a>Step 1 定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Step-2-遍历"><a href="#Step-2-遍历" class="headerlink" title="Step 2 遍历"></a>Step 2 遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )<br>&#123;<br><span class="hljs-keyword">int</span> a = x + dx[i], b = y + dy[i];<br>    <span class="hljs-comment">/* ...... */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="初始化正无穷数组"><a href="#初始化正无穷数组" class="headerlink" title="初始化正无穷数组"></a>初始化正无穷数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(a));<br></code></pre></td></tr></table></figure><h2 id="vector-去重"><a href="#vector-去重" class="headerlink" title="vector 去重"></a>vector 去重</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">q.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>()), q.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="STL-优先队列-priority-queue-实现"><a href="#STL-优先队列-priority-queue-实现" class="headerlink" title="STL 优先队列 priority_queue 实现"></a>STL 优先队列 priority_queue 实现</h3><h4 id="Step-1-定义-1"><a href="#Step-1-定义-1" class="headerlink" title="Step 1 定义"></a>Step 1 定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-keyword">int</span>&gt; heap; <span class="hljs-comment">// 默认大根堆</span><br>priority_queue&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; heap; <span class="hljs-comment">// 小根堆</span><br></code></pre></td></tr></table></figure><h4 id="Step-2-1-插入元素"><a href="#Step-2-1-插入元素" class="headerlink" title="Step 2.1 插入元素"></a>Step 2.1 插入元素</h4><p>时间复杂度：$O(\log n)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">heap.<span class="hljs-built_in">push</span>(x);<br></code></pre></td></tr></table></figure><h4 id="Step-2-2-返回堆顶元素"><a href="#Step-2-2-返回堆顶元素" class="headerlink" title="Step 2.2 返回堆顶元素"></a>Step 2.2 返回堆顶元素</h4><p>时间复杂度：$O(1)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">heap.<span class="hljs-built_in">top</span>();<br></code></pre></td></tr></table></figure><h4 id="Step-2-3-弹出堆顶元素"><a href="#Step-2-3-弹出堆顶元素" class="headerlink" title="Step 2.3 弹出堆顶元素"></a>Step 2.3 弹出堆顶元素</h4><p>时间复杂度：$O(\log n)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">heap.<span class="hljs-built_in">pop</span>();<br></code></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="朴素并查集"><a href="#朴素并查集" class="headerlink" title="朴素并查集"></a>朴素并查集</h3><blockquote><p>并查集可通过按秩合并进行进一步优化，鉴于代码较为复杂，此处不予以展示</p></blockquote><h4 id="Step-1-存储"><a href="#Step-1-存储" class="headerlink" title="Step 1 存储"></a>Step 1 存储</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> p[N];<br></code></pre></td></tr></table></figure><h4 id="Step-2-初始化"><a href="#Step-2-初始化" class="headerlink" title="Step 2 初始化"></a>Step 2 初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br></code></pre></td></tr></table></figure><h4 id="Step-3-1-查找（返回祖宗节点）"><a href="#Step-3-1-查找（返回祖宗节点）" class="headerlink" title="Step 3.1 查找（返回祖宗节点）"></a>Step 3.1 查找（返回祖宗节点）</h4><p>时间复杂度：$O(\log n)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br><span class="hljs-keyword">return</span> p[x];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-3-2-合并"><a href="#Step-3-2-合并" class="headerlink" title="Step 3.2 合并"></a>Step 3.2 合并</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    p[<span class="hljs-built_in">find</span>(x)] = <span class="hljs-built_in">find</span>(y);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="Method-1-快速排序"><a href="#Method-1-快速排序" class="headerlink" title="Method 1 快速排序"></a>Method 1 快速排序</h3><p>时间复杂度：$O(n \log n)$ <sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文时间复杂度为便于记忆，取通常情况">[9]</span></a></sup>​</p><h4 id="Step-1-排序"><a href="#Step-1-排序" class="headerlink" title="Step 1 排序"></a>Step 1 排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过对快速排序进行适当变形，即可快速查找出数组中按顺序排列的任意一元素</p></blockquote><h3 id="Method-2-归并排序"><a href="#Method-2-归并排序" class="headerlink" title="Method 2 归并排序"></a>Method 2 归并排序</h3><p>时间复杂度：$O(n \log n)$</p><h4 id="Step-1-初始化"><a href="#Step-1-初始化" class="headerlink" title="Step 1 初始化"></a>Step 1 初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> tmp[N];<br></code></pre></td></tr></table></figure><h4 id="Step-2-排序"><a href="#Step-2-排序" class="headerlink" title="Step 2 排序"></a>Step 2 排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br><br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过对归并排序进行适当变形，可快速合并任意个单调区间，也称 <code>多路归并</code> </p></blockquote><h3 id="Method-3-STL-sort-实现"><a href="#Method-3-STL-sort-实现" class="headerlink" title="Method 3 STL sort() 实现"></a>Method 3 STL sort() 实现</h3><p>时间复杂度：$O(n \log n)$</p><h4 id="Method-1-传入cmp参数"><a href="#Method-1-传入cmp参数" class="headerlink" title="Method 1 传入cmp参数"></a>Method 1 传入cmp参数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123; <span class="hljs-comment">/* ...... */</span> &#125;<br> <br><span class="hljs-built_in">sort</span>(examples, examples + n, cmp);<br></code></pre></td></tr></table></figure><h4 id="Method-2-重载小于号运算符"><a href="#Method-2-重载小于号运算符" class="headerlink" title="Method 2 重载小于号运算符"></a>Method 2 重载小于号运算符</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Example</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-keyword">const</span> Example &amp;t) <span class="hljs-keyword">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> a &gt; t.a;<br>    &#125;<br>&#125;examples[N];<br><br><span class="hljs-built_in">sort</span>(examples, examples + n);<br></code></pre></td></tr></table></figure><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="Case-1-整数二分"><a href="#Case-1-整数二分" class="headerlink" title="Case 1 整数二分"></a>Case 1 整数二分</h3><p>时间复杂度：$O(\log n)$</p><h4 id="Step-1-定义check函数"><a href="#Step-1-定义check函数" class="headerlink" title="Step 1 定义check函数"></a>Step 1 定义check函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br></code></pre></td></tr></table></figure><h4 id="Step-2-二分"><a href="#Step-2-二分" class="headerlink" title="Step 2 二分"></a>Step 2 二分</h4><h5 id="Case-1-区间-l-r-被划分成-l-mid-1-和-mid-r"><a href="#Case-1-区间-l-r-被划分成-l-mid-1-和-mid-r" class="headerlink" title="Case 1 区间[l, r]被划分成[l, mid - 1]和[mid, r]"></a>Case 1 区间[l, r]被划分成[l, mid - 1]和[mid, r]</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Case-2-区间-l-r-被划分成-l-mid-1-和-mid-r"><a href="#Case-2-区间-l-r-被划分成-l-mid-1-和-mid-r" class="headerlink" title="Case 2 区间[l, r]被划分成[l, mid - 1]和[mid, r]"></a>Case 2 区间[l, r]被划分成[l, mid - 1]和[mid, r]</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Case-2-浮点数二分"><a href="#Case-2-浮点数二分" class="headerlink" title="Case 2 浮点数二分"></a>Case 2 浮点数二分</h3><h4 id="Step-1-定义check函数-1"><a href="#Step-1-定义check函数-1" class="headerlink" title="Step 1 定义check函数"></a>Step 1 定义check函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span> </span>&#123;<span class="hljs-comment">/* ... */</span>&#125; <span class="hljs-comment">// 检查x是否满足某种性质</span><br></code></pre></td></tr></table></figure><h4 id="Step-2-计算"><a href="#Step-2-计算" class="headerlink" title="Step 2 计算"></a>Step 2 计算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">bsearch</span><span class="hljs-params">(<span class="hljs-keyword">double</span> l, <span class="hljs-keyword">double</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> eps = <span class="hljs-number">1e-6</span>;   <span class="hljs-comment">// eps 表示精度，取决于题目对精度的要求</span><br>    <span class="hljs-keyword">while</span> (r - l &gt; eps)<br>    &#123;<br>        <span class="hljs-keyword">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-3-STL-特殊整数二分"><a href="#Case-3-STL-特殊整数二分" class="headerlink" title="Case 3 STL 特殊整数二分"></a>Case 3 STL 特殊整数二分</h3><blockquote><p>对于单调区间的二分查找</p></blockquote><ul><li><code>lower_bound</code> 返回第一个<strong>大于等于</strong> $x$​ 的元素的位置的迭代器（或指针）。</li><li><code>upper_bound</code> 返回第一个<strong>大于</strong> $x$​ 的元素的位置的迭代器（或指针）。</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在有序int数组（元素存放在 1~n ）中查找大于等于x的最小整数的下标：</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-built_in">lower_bound</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, x) - a;<br><span class="hljs-comment">// 在有序vector&lt;int&gt;中查找小于等于x的最大整数（假设一定存在）：</span><br><span class="hljs-keyword">int</span> y = *--<span class="hljs-built_in">upper_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), x);<br></code></pre></td></tr></table></figure><h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><blockquote><p>高精度可通过压位进行优化，鉴于代码较为复杂，此处不予以展示</p></blockquote><h3 id="Case-1-高精度加法"><a href="#Case-1-高精度加法" class="headerlink" title="Case 1 高精度加法"></a>Case 1 高精度加法</h3><h4 id="Step-1-输入处理"><a href="#Step-1-输入处理" class="headerlink" title="Step 1 输入处理"></a>Step 1 输入处理</h4><p>总体思路：先输入 <code>string</code> ，后转为 <code>vector</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// string_to_vector 函数</span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tv</span><span class="hljs-params">(string &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) x.<span class="hljs-built_in">push_back</span>(s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-2-高精度加法"><a href="#Step-2-高精度加法" class="headerlink" title="Step 2 高精度加法"></a>Step 2 高精度加法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;x, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x.<span class="hljs-built_in">size</span>() &lt; y.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(y, x);<br>    <br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += x[i];<br>        <span class="hljs-keyword">if</span> (i &lt; y.<span class="hljs-built_in">size</span>()) t += y[i];<br>        res.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (t) res.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-2-高精度减法"><a href="#Case-2-高精度减法" class="headerlink" title="Case 2 高精度减法"></a>Case 2 高精度减法</h3><h4 id="Step-1-输入处理-1"><a href="#Step-1-输入处理-1" class="headerlink" title="Step 1 输入处理"></a>Step 1 输入处理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tv</span><span class="hljs-params">(string &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) x.<span class="hljs-built_in">push_back</span>(s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-2-大小比较"><a href="#Step-2-大小比较" class="headerlink" title="Step 2 大小比较"></a>Step 2 大小比较</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;x, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x.<span class="hljs-built_in">size</span>() != y.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> x.<span class="hljs-built_in">size</span>() &gt; y.<span class="hljs-built_in">size</span>();<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">if</span> (x[i] != y[i]) <span class="hljs-keyword">return</span> x[i] &gt; y[i];<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-3-高精度减法"><a href="#Step-3-高精度减法" class="headerlink" title="Step 3 高精度减法"></a>Step 3 高精度减法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;x, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; x.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t = x[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; y.<span class="hljs-built_in">size</span>()) t -= y[i];<br>        res.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) res.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-3-高精度乘法"><a href="#Case-3-高精度乘法" class="headerlink" title="Case 3 高精度乘法"></a>Case 3 高精度乘法</h3><blockquote><p>此处特指大整数乘小整数的情况</p></blockquote><h4 id="Step-1-输入处理-2"><a href="#Step-1-输入处理-2" class="headerlink" title="Step 1 输入处理"></a>Step 1 输入处理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tv</span><span class="hljs-params">(string &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) x.<span class="hljs-built_in">push_back</span>(s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-2-高精度乘法"><a href="#Step-2-高精度乘法" class="headerlink" title="Step 2 高精度乘法"></a>Step 2 高精度乘法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; x.<span class="hljs-built_in">size</span>() || t; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; x.<span class="hljs-built_in">size</span>()) t += x[i] * y;<br>        res.<span class="hljs-built_in">pb</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) res.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-4-高精度除法"><a href="#Case-4-高精度除法" class="headerlink" title="Case 4 高精度除法"></a>Case 4 高精度除法</h3><h4 id="Step-1-输入处理-3"><a href="#Step-1-输入处理-3" class="headerlink" title="Step 1 输入处理"></a>Step 1 输入处理</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tv</span><span class="hljs-params">(string &amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) x.<span class="hljs-built_in">push_back</span>(s[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-2-高精度除法"><a href="#Step-2-高精度除法" class="headerlink" title="Step 2 高精度除法"></a>Step 2 高精度除法</h4><blockquote><p><code>r</code> 表示余数，需预定义</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> &amp;r)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + x[i];<br>        res.<span class="hljs-built_in">push_back</span>(r / y);<br>        r %= y;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) res.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="Case-1-一维前缀和"><a href="#Case-1-一维前缀和" class="headerlink" title="Case 1 一维前缀和"></a>Case 1 一维前缀和</h3><blockquote><p>递推式：</p><script type="math/tex; mode=display">\begin{align}&S[i] = \sum_{j=1}^{i}{A[j]} \\&sum(l, r) = \sum_{i = l}^{r}{A[i]} = S[r] - S[l - 1]\end{align}</script></blockquote><h4 id="Step-1-初始化-1"><a href="#Step-1-初始化-1" class="headerlink" title="Step 1 初始化"></a>Step 1 初始化</h4><blockquote><p><code>a[]</code> 表示原数组， <code>n</code> 表示有效数组大小， <code>s[]</code> 表示前缀和数组</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br></code></pre></td></tr></table></figure><h4 id="Step-2-区间计算"><a href="#Step-2-区间计算" class="headerlink" title="Step 2 区间计算"></a>Step 2 区间计算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s[r] - s[l - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Case-2-二维前缀和"><a href="#Case-2-二维前缀和" class="headerlink" title="Case 2 二维前缀和"></a>Case 2 二维前缀和</h3><blockquote><p>递推式：</p><script type="math/tex; mode=display">\begin{align}&S[i,j] = \sum_{x = 1}^{i}{\sum_{y = 1}^{j}{A[x, y]}} = S[i-1, j] + S[i, j - 1] - S[i - 1, j - 1] + A[i, j] \\ &\sum_{x= i - R + 1}^{i}{\sum_{y=j - R + 1}^{j}{A[x, y]}} = S[i, j] - S[i - R, j] - S[i, j - R] + S[i - R, j - R] \\&sum((x_1, y_1) , (x_2, y_2)) = \sum_{x = x_1}^{x_2}{\sum_{y = y_1}^{y2}{A[x, y]}} = S[x_2, y_2] - S[x_1 - 1, y_2] - S[x_2, y_1 - 1] + S[x_1 - 1, y_1 - 1]\end{align}</script></blockquote><h4 id="Step-1-初始化-2"><a href="#Step-1-初始化-2" class="headerlink" title="Step 1 初始化"></a>Step 1 初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>s[i][j] += s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h4 id="Step-2-区间计算-1"><a href="#Step-2-区间计算-1" class="headerlink" title="Step 2 区间计算"></a>Step 2 区间计算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s[x2][y2] - s[x1 - <span class="hljs-number">1</span>][y2] - s[x2][y1 - <span class="hljs-number">1</span>] + s[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><blockquote><p>可将 <code>差分</code> 理解为 <code>前缀和</code> 的逆运算</p></blockquote><h3 id="Case-1-一维差分"><a href="#Case-1-一维差分" class="headerlink" title="Case 1 一维差分"></a>Case 1 一维差分</h3><blockquote><p>基本思路：</p><ul><li>给区间 <code>[l, r]</code> 中的每个数加上 <code>c</code> ：<code>B[l] += c, B[r + 1] -= c</code></li></ul></blockquote><h4 id="Step-1-1-区间操作函数"><a href="#Step-1-1-区间操作函数" class="headerlink" title="Step 1.1 区间操作函数"></a>Step 1.1 区间操作函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[l] += c;<br>    b[r + <span class="hljs-number">1</span>] -= c;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-1-2-初始化差分数组"><a href="#Step-1-2-初始化差分数组" class="headerlink" title="Step 1.2 初始化差分数组"></a>Step 1.2 初始化差分数组</h4><blockquote><p><code>a[]</code> 表示原数组， <code>b[]</code> 表示差分数组</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">insert</span>(b, i, i, a[i]);<br></code></pre></td></tr></table></figure><h4 id="Step-2-区间操作"><a href="#Step-2-区间操作" class="headerlink" title="Step 2 区间操作"></a>Step 2 区间操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">insert</span>(b, l, r, c);<br></code></pre></td></tr></table></figure><h4 id="Step-3-差分数组还原"><a href="#Step-3-差分数组还原" class="headerlink" title="Step 3 差分数组还原"></a>Step 3 差分数组还原</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h3 id="Case-2-二维差分"><a href="#Case-2-二维差分" class="headerlink" title="Case 2 二维差分"></a>Case 2 二维差分</h3><blockquote><p>基本思路：</p><ul><li>给以 <code>(x1, y1)</code> 为左上角， <code>(x2, y2)</code> 为右下角的子矩阵中的所有元素加上 <code>c</code> ：<br><code>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c</code></li></ul></blockquote><h4 id="Step-1-1-区间操作函数-1"><a href="#Step-1-1-区间操作函数-1" class="headerlink" title="Step 1.1 区间操作函数"></a>Step 1.1 区间操作函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b[], <span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> y1, <span class="hljs-keyword">int</span> x2, <span class="hljs-keyword">int</span> y2, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Step-1-2-初始化差分数组-1"><a href="#Step-1-2-初始化差分数组-1" class="headerlink" title="Step 1.2 初始化差分数组"></a>Step 1.2 初始化差分数组</h4><blockquote><p><code>a[]</code> 表示原数组， <code>b[]</code> 表示差分数组</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        <span class="hljs-built_in">insert</span>(b, i, j, i, j, a[i][j]);<br></code></pre></td></tr></table></figure><h4 id="Step-2-区间操作-1"><a href="#Step-2-区间操作-1" class="headerlink" title="Step 2 区间操作"></a>Step 2 区间操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">insert</span>(b, x1, y1, x2, y2, c);<br></code></pre></td></tr></table></figure><h4 id="Step-3-差分数组还原-1"><a href="#Step-3-差分数组还原-1" class="headerlink" title="Step 3 差分数组还原"></a>Step 3 差分数组还原</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>        b[i][j] += b[i - <span class="hljs-number">1</span>][j] + b[i][j - <span class="hljs-number">1</span>] - b[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><blockquote><p>常见问题分类：</p><ol><li>对于一个序列，用两个指针维护一段区间</li><li>对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j ++ ;<br>    <span class="hljs-comment">/* 具体问题的逻辑 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="位运算与二进制"><a href="#位运算与二进制" class="headerlink" title="位运算与二进制"></a>位运算与二进制</h2><h3 id="二进制状态压缩"><a href="#二进制状态压缩" class="headerlink" title="二进制状态压缩"></a>二进制状态压缩</h3><blockquote><p>由于 Markdown 渲染器对于转义符的渲染不是很到位 :-( ， 此处表格采用截图代替</p></blockquote><p><img src="/img\img_1.jpg" alt="img_1"></p><h3 id="lowbit-运算"><a href="#lowbit-运算" class="headerlink" title="lowbit 运算"></a>lowbit 运算</h3><blockquote><p>返回 <code>n</code> 的最后一位： <code>lowbit(n) = n &amp; (-n)</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><blockquote><p><code>q[]</code> 表示区间中的所有下标</p></blockquote><h3 id="Step-1-准备"><a href="#Step-1-准备" class="headerlink" title="Step 1 准备"></a>Step 1 准备</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-keyword">int</span>&gt; q;<br></code></pre></td></tr></table></figure><h3 id="Step-2-初始化-1"><a href="#Step-2-初始化-1" class="headerlink" title="Step 2 初始化"></a>Step 2 初始化</h3><blockquote><p>排序去重</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>());<br>q.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(q.<span class="hljs-built_in">begin</span>(), q.<span class="hljs-built_in">end</span>()), q.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><h3 id="Step-3-求出离散化后下标"><a href="#Step-3-求出离散化后下标" class="headerlink" title="Step 3 求出离散化后下标"></a>Step 3 求出离散化后下标</h3><blockquote><p>用 <code>二分</code> 将原下标映射至 <code>1 ~ n</code> </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = q.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (q[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><blockquote><p>将所有存在交集的区间合并</p><p>NOTE : 模板尚不兼容 <code>C++ 98</code> ，待修改</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(), segs.<span class="hljs-built_in">end</span>());<br><br>    <span class="hljs-keyword">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = <span class="hljs-built_in">max</span>(ed, seg.second);<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><h3 id="加法原理"><a href="#加法原理" class="headerlink" title="加法原理"></a>加法原理</h3><p>完成一个工程可以有 $n$ 类办法， $a_i(1 \leq i \leq n)$ 代表第 $i$ 类方法的数目。那么完成这件事共有 $S = a_1 + a_2 + \cdots + a_n$ 种不同的方法。</p><h3 id="乘法原理"><a href="#乘法原理" class="headerlink" title="乘法原理"></a>乘法原理</h3><p>完成一个工程需要分 $n$ 个步骤， $a_i(1 \leq i \leq n)$ 代表第 $i$ 个步骤的不同方法数目。那么完成这件事共有 $S = a_1 \times a_2 \times \cdots \times a_n$ 种不同的方法。</p><h3 id="排列数"><a href="#排列数" class="headerlink" title="排列数"></a>排列数</h3><p>从 $n$ 个不同元素中，任取 $m$（$m\leq n$，$m$ 与 $n$ 均为自然数，下同）个元素按照一定的顺序排成一列，叫做从 $n$ 个不同元素中取出 $m$ 个元素的一个排列；从 $n$ 个不同元素中取出 $m$($m\leq n$) 个元素的所有排列的个数，叫做从 $n$ 个不同元素中取出 $m$ 个元素的排列数，用符号 $\mathrm A_n^m$（或者是 $\mathrm P_n^m$）表示。</p><p>排列的计算公式如下：</p><script type="math/tex; mode=display">\mathrm A_n^m = n(n-1)(n-2) \cdots (n-m+1) = \frac{n!}{(n - m)!}</script><h3 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h3><p>从 $n$ 个不同元素中，任取 $m$($m\leq n$) 个元素组成一个集合，叫做从 $n$ 个不同元素中取出 $m$ 个元素的一个组合；从 $n$ 个不同元素中取出 $m$($m\leq n$) 个元素的所有组合的个数，叫做从 $n$ 个不同元素中取出 $m$ 个元素的组合数。用符号 $\mathrm C_n^m$ （或者是 $\displaystyle \binom{n}{m}$ ）来表示。</p><p>组合数计算公式如下：</p><script type="math/tex; mode=display">\mathrm C_n^m = \frac{\mathrm A_n^m}{m!} = \frac{n!}{m!(n - m)!}</script><h1 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h1><h2 id="卡常技巧"><a href="#卡常技巧" class="headerlink" title="卡常技巧"></a>卡常技巧</h2><h3 id="cin-优化"><a href="#cin-优化" class="headerlink" title="cin 优化"></a>cin 优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 优化后不可用scanf</span><br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h2 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h2><h3 id="数据类型简写-typedef"><a href="#数据类型简写-typedef" class="headerlink" title="数据类型简写  typedef"></a>数据类型简写  typedef</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// e.g.</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>, <span class="hljs-keyword">double</span>&gt; PDD;<br></code></pre></td></tr></table></figure><h3 id="变量简写-amp-引用"><a href="#变量简写-amp-引用" class="headerlink" title="变量简写  &amp; 引用"></a>变量简写  &amp; 引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// e.g.</span><br><span class="hljs-keyword">int</span> &amp;t = f[a][b];<br></code></pre></td></tr></table></figure><h3 id="函数简写-define-宏定义"><a href="#函数简写-define-宏定义" class="headerlink" title="函数简写 #define 宏定义"></a>函数简写 #define 宏定义</h3><blockquote><p>此处参考墨染空<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="dalao的主页">[4]</span></a></sup>的代码</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// e.g.</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br></code></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="竞赛编译器"><a href="#竞赛编译器" class="headerlink" title="竞赛编译器"></a>竞赛编译器</h2><div class="table-container"><table><thead><tr><th style="text-align:center">软件及版本</th><th style="text-align:center">命令</th><th>C++ 特性</th></tr></thead><tbody><tr><td style="text-align:center">G++ 4.8.4</td><td style="text-align:center">g++ test.cpp -o test</td><td>C++ 98</td></tr></tbody></table></div><blockquote><p>由于不支持 <code>C++ 11</code> 的特性<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="上表摘自 NOI系列活动标准竞赛环境(2016年11月08日更新)">[5]</span></a></sup>，所以不能使用 <code>to_string</code> ， <code>stoi</code>  ， <code>stol</code> ， <code>auto</code> ， <code>unordered_map</code> ， <code>unordered_set</code>， <code>&#123;(pair)&#125;</code> ， 范围遍历等函数与模块<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="摘自 蓝桥杯支持c++11么 - AcWing">[6]</span></a></sup></p><hr><p>update on 2021/7/18</p><p>NOI Linux 2.0 发布了，编译器默认支持 <code>C++ 11 / C++ 14</code> ，所以万一上面能用了呢 : |</p><p>但若加上 <code>-std=c++98</code> 就。。。</p></blockquote><h2 id="竞赛空间复杂度"><a href="#竞赛空间复杂度" class="headerlink" title="竞赛空间复杂度"></a>竞赛空间复杂度</h2><blockquote><p>比赛其实一般不会爆内存（可能？</p></blockquote><p>一般 $128.00MB$ ，大约可开 $2.5 \times 10^7$ 的 <code>int</code> 数组（可能？，<strong>注意</strong>：<strong>递归</strong>也需要<strong>空间</strong>。</p><p>换算表参考如下：</p><script type="math/tex; mode=display">\begin{align}1 Byte &= 8 bit \\1 KB &= 1024 Byte \\1 MB &= 1024 KB = 1024^2 Byte \\1 GB &= 1024 MB = 1024^2 KB = 1024^3 Byte\end{align}</script><p>代码计算如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// e.g.</span><br>cout &lt;&lt; (<span class="hljs-keyword">sizeof</span> arr1 + <span class="hljs-keyword">sizeof</span> arr2) / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>&lt;&lt; <span class="hljs-string">&quot;MB&quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>常用数据类型所占的字节大小<a href="https://ericyuan2007.github.io/2021/06/29/算法技巧与模板的集合/#常用数据类型">见上</a></p><h2 id="竞赛时间复杂度"><a href="#竞赛时间复杂度" class="headerlink" title="竞赛时间复杂度"></a>竞赛时间复杂度</h2><div class="table-container"><table><thead><tr><th style="text-align:center">时间限制</th><th style="text-align:center">每秒运算次数</th><th style="text-align:center">总运算次数</th></tr></thead><tbody><tr><td style="text-align:center">$1.00s$</td><td style="text-align:center">$10^7$ ~ $10^8/s$</td><td style="text-align:center">$10^7$ ~ $10^8$</td></tr></tbody></table></div><p>具体选择方法见下表<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="参考 由数据范围反推算法复杂度以及算法内容 - AcWing">[7]</span></a></sup>：</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据范围</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">算法选择</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">$n \leq 30$</td><td style="text-align:center">指数级别</td><td style="text-align:center"><code>dfs+剪枝</code> <code>状态压缩dp</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^2$</td><td style="text-align:center">$O(n ^ 3)$</td><td style="text-align:center"><code>floyd</code> <code>dp</code> <code>高斯消元</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^3$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center"><code>dp</code> <code>二分</code> <code>朴素版Dijkstra</code> <code>朴素版Prim</code> <code>Bellman-Ford</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^4$</td><td style="text-align:center">$O(n \sqrt{n})$</td><td style="text-align:center"><code>块状链表</code> <code>分块</code> <code>莫队</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^5$</td><td style="text-align:center">$O(n \log n)$</td><td style="text-align:center"><code>各种sort</code> <code>线段树</code> <code>树状数组</code> <code>set/map</code> <code>heap</code> <code>拓扑排序</code> <code>dijkstra+heap</code> <code>prim+heap</code> <code>spfa</code> <code>求凸包</code> <code>求半平面交</code> <code>二分</code> <code>CDQ分治</code> <code>整体二分</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^6$</td><td style="text-align:center">$O(n)$ 或常数较小的 $O(n \log n)$</td><td style="text-align:center"><code>单调队列</code> <code>hash</code> <code>双指针扫描</code> <code>并查集</code> <code>kmp</code> <code>AC自动机</code> <code>sort</code> <code>树状数组</code> <code>heap</code> <code>dijkstra</code> <code>spfa</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^7$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center"><code>双指针扫描</code> <code>kmp</code> <code>AC自动机</code> <code>线性筛素数</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^9$</td><td style="text-align:center">$O(\sqrt{n})$</td><td style="text-align:center"><code>判断质数</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^{18}$</td><td style="text-align:center">$O(\log n)$</td><td style="text-align:center"><code>最大公约数</code> <code>快速幂</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^{1000}$</td><td style="text-align:center">$O((\log n) ^ 2)$</td><td style="text-align:center"><code>高精度加减乘除</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$n \leq 10^{100000}$</td><td style="text-align:center">$O(\log k \times \log \log k)$</td><td style="text-align:center"><code>高精度加减</code> <code>FFT/NTT</code></td><td style="text-align:center">$k$ 表示位数</td></tr></tbody></table></div><h1 id="参考资料与注释"><a href="#参考资料与注释" class="headerlink" title="参考资料与注释"></a>参考资料与注释</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>来自 <a href="https://www.acwing.com/activity/content/introduction/11/">AcWing算法基础课</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://oi-wiki.org/">OI Wiki</a> / <a href="https://github.com/OI-wiki/OI-wiki/">GitHub Repository</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>《算法竞赛进阶指南》 李煜东著  2018年1月第1版  2020年8月第6次印刷<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://www.acwing.com/user/myspace/index/5751/">dalao的主页</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>上表摘自 <a href="https://www.noi.cn/gynoi/jsgz/2018-08-13/710465.shtml">NOI系列活动标准竞赛环境(2016年11月08日更新)</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>摘自 <a href="https://www.acwing.com/community/content/49963/">蓝桥杯支持c++11么 - AcWing</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>参考 <a href="https://www.acwing.com/blog/content/32/">由数据范围反推算法复杂度以及算法内容 - AcWing</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>摘自 <a href="https://blog.csdn.net/zcyzsy/article/details/77935651">C/C++中基本数据类型所占内存大小_ZMyths的博客</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>本文时间复杂度为便于记忆，取通常情况<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技巧总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>趣题的集合</title>
    <link href="/2021/06/19/%E8%B6%A3%E9%A2%98%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <url>/2021/06/19/%E8%B6%A3%E9%A2%98%E7%9A%84%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="趣题的集合"><a href="#趣题的集合" class="headerlink" title="趣题的集合"></a>趣题的集合</h1><blockquote><p>主要收集一些刷题期间遇到的有意思的题目</p><p>持续更新</p></blockquote><ol><li><a href="https://www.acwing.com/problem/content/438/">NOIP2008普及组 立体图</a> 算法提示：坐标变换</li><li><a href="https://www.acwing.com/problem/content/449/">NOIP2011普及组 瑞士轮</a> 算法提示：二路归并</li><li><a href="https://www.acwing.com/problem/content/445/">NOIP2010普及组 导弹拦截</a> 算法提示：暴力枚举（就是有点烦）</li></ol>]]></content>
    
    
    <categories>
      
      <category>技巧总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>题解 2019 CCF CSP-J 公交换乘</title>
    <link href="/2021/06/15/%E9%A2%98%E8%A7%A3%202019%20CCF%20CSP-J%20%E5%85%AC%E4%BA%A4%E6%8D%A2%E4%B9%98/"/>
    <url>/2021/06/15/%E9%A2%98%E8%A7%A3%202019%20CCF%20CSP-J%20%E5%85%AC%E4%BA%A4%E6%8D%A2%E4%B9%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-2019-CCF-CSP-J-公交换乘"><a href="#题解-2019-CCF-CSP-J-公交换乘" class="headerlink" title="题解 2019 CCF CSP-J 公交换乘"></a>题解 2019 CCF CSP-J 公交换乘</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P5661">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/description/1162/">AcWing</a></li></ol><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>开一个 <code>队列</code> ，存入当前可用的优惠券，同时开 <code>bool</code> 数组对使用过的优惠券进行标记，接下来便可暴力枚举</p><p>注意：类似输入数据较多的题最好使用 <code>scanf</code> 读入， <code>cin</code> 太慢了（当然禁用 <code>scanf</code> 除外），会慢上3倍</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Coupon</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> p, t;<br>&#125;q[N];<br><span class="hljs-keyword">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-keyword">if</span> (!a) res += b, q[ ++ tt] = &#123;b, c&#125;;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; q[hh].t &lt; c - <span class="hljs-number">45</span>) hh ++ ;  <span class="hljs-comment">// 删除过期优惠券</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hh; i &lt;= tt; i ++ )<br>                <span class="hljs-keyword">if</span> (!st[i] &amp;&amp; q[i].p &gt;= b)<br>                &#123;<br>                    st[i] = <span class="hljs-literal">true</span>;<br>                    b = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            res += b;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>普及-</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 NOIP2006普及组 明明的随机数</title>
    <link href="/2021/06/15/%E9%A2%98%E8%A7%A3%20NOIP2006%E6%99%AE%E5%8F%8A%E7%BB%84%20%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2021/06/15/%E9%A2%98%E8%A7%A3%20NOIP2006%E6%99%AE%E5%8F%8A%E7%BB%84%20%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-NOIP2006普及组-明明的随机数"><a href="#题解-NOIP2006普及组-明明的随机数" class="headerlink" title="题解 NOIP2006普及组 明明的随机数"></a>题解 NOIP2006普及组 明明的随机数</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1059">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/description/427/">AcWing</a></li></ol><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>使用 <code>set</code> 模板直接实现去重排序，使用迭代器进行排序</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>set&lt;<span class="hljs-keyword">int</span>&gt; num;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>        num.<span class="hljs-built_in">insert</span>(t);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld\n&quot;</span>, num.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">for</span> (set&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = num.<span class="hljs-built_in">begin</span>(); it != num.<span class="hljs-built_in">end</span>(); it ++ ) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>使用 <code>sort()</code> 和 <code>unique()</code> ，分别实现排序和去重 </p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>;<br><span class="hljs-keyword">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br>    <span class="hljs-built_in">sort</span>(q, q + n);<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-built_in">unique</span>(q, q + n) - q;<br>    cout &lt;&lt; k &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i ++ ) cout &lt;&lt; q[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>此题数据范围较小，可采用 <code>桶排序</code> </p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>入门</tag>
      
      <tag>排序</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 NOIP2017普及组 成绩</title>
    <link href="/2021/06/02/%E9%A2%98%E8%A7%A3%20NOIP2017%E6%99%AE%E5%8F%8A%E7%BB%84%20%E6%88%90%E7%BB%A9/"/>
    <url>/2021/06/02/%E9%A2%98%E8%A7%A3%20NOIP2017%E6%99%AE%E5%8F%8A%E7%BB%84%20%E6%88%90%E7%BB%A9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-NOIP2017普及组-成绩"><a href="#题解-NOIP2017普及组-成绩" class="headerlink" title="题解 NOIP2017普及组 成绩"></a>题解 NOIP2017普及组 成绩</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P3954">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/description/471/">AcWing</a></li></ol><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    cout &lt;&lt; a * <span class="hljs-number">0.2</span> + b * <span class="hljs-number">0.3</span> + c * <span class="hljs-number">0.5</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 NOIP2010普及组 接水问题</title>
    <link href="/2021/06/01/%E9%A2%98%E8%A7%A3%20NOIP2010%E6%99%AE%E5%8F%8A%E7%BB%84%20%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/01/%E9%A2%98%E8%A7%A3%20NOIP2010%E6%99%AE%E5%8F%8A%E7%BB%84%20%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-题解-NOIP2010普及组-接水问题"><a href="#题解-题解-NOIP2010普及组-接水问题" class="headerlink" title="题解 题解 NOIP2010普及组 接水问题"></a>题解 题解 NOIP2010普及组 接水问题</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1190">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/description/444/">AcWing</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>有 $n$ 个同学和 $m$ 个水龙头，$n$ 个同学接水时间分别为 $w_1, w_2, \cdots, w_n$ ，求最小接水时间。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>对于每个同学，都可选择当前<strong>总耗时最小</strong>的水龙头进行接水，由于本题数据范围小，因此可以进行暴力枚举。</p><p>但暴力枚举每次总耗时最小的水龙头还是有点慢，因此也可在此基础上使用 <code>小根堆</code> 进行优化，每次仅需取出堆顶即是当前总耗时最小的水龙头时间。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    priority_queue&lt;<span class="hljs-keyword">int</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt; &gt; heap;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) heap.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">int</span> t = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br>        heap.<span class="hljs-built_in">push</span>(x + t);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m - <span class="hljs-number">1</span>; i ++ ) heap.<span class="hljs-built_in">pop</span>();<br>    cout &lt;&lt; heap.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>普及-</tag>
      
      <tag>STL</tag>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 NOIP2005普及组 陶陶摘苹果</title>
    <link href="/2021/05/30/%E9%A2%98%E8%A7%A3%20NOIP2005%E6%99%AE%E5%8F%8A%E7%BB%84%20%E9%99%B6%E9%99%B6%E6%91%98%E8%8B%B9%E6%9E%9C/"/>
    <url>/2021/05/30/%E9%A2%98%E8%A7%A3%20NOIP2005%E6%99%AE%E5%8F%8A%E7%BB%84%20%E9%99%B6%E9%99%B6%E6%91%98%E8%8B%B9%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-NOIP2005普及组-陶陶摘苹果"><a href="#题解-NOIP2005普及组-陶陶摘苹果" class="headerlink" title="题解 NOIP2005普及组 陶陶摘苹果"></a>题解 NOIP2005普及组 陶陶摘苹果</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1046">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/description/423/">AcWing</a></li></ol><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> n[<span class="hljs-number">10</span>], a, cnt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) cin &gt;&gt; n[i];<br>    cin &gt;&gt; a;<br>    a += <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) <span class="hljs-keyword">if</span>(a &gt;= n[i]) cnt ++ ;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 NOIP2004普及组 不高兴的津津</title>
    <link href="/2021/05/30/%E9%A2%98%E8%A7%A3%20NOIP2004%E6%99%AE%E5%8F%8A%E7%BB%84%20%E4%B8%8D%E9%AB%98%E5%85%B4%E7%9A%84%E6%B4%A5%E6%B4%A5/"/>
    <url>/2021/05/30/%E9%A2%98%E8%A7%A3%20NOIP2004%E6%99%AE%E5%8F%8A%E7%BB%84%20%E4%B8%8D%E9%AB%98%E5%85%B4%E7%9A%84%E6%B4%A5%E6%B4%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-NOIP2004普及组-不高兴的津津"><a href="#题解-NOIP2004普及组-不高兴的津津" class="headerlink" title="题解 NOIP2004普及组 不高兴的津津"></a>题解 NOIP2004普及组 不高兴的津津</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1085">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/description/419/">AcWing</a></li></ol><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> m, n, a, b;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i ++ )<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span> (a + b &gt; m) m = a + b, n = i; <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">8</span>) cout &lt;&lt; n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数论2</title>
    <link href="/2021/05/30/%E6%95%B0%E8%AE%BA2/"/>
    <url>/2021/05/30/%E6%95%B0%E8%AE%BA2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数论2"><a href="#数论2" class="headerlink" title="数论2"></a>数论2</h1><blockquote><p>因数专题</p><p>未完待续</p><p>——————————</p><p>update on 2021/7/12</p><p>大概率鸽了＞︿＜。。。</p></blockquote><h2 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h2><h3 id="关于因数（约数）"><a href="#关于因数（约数）" class="headerlink" title="关于因数（约数）"></a>关于因数（约数）</h3><p>合数的性质<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="摘自初等数论学习笔记（一）">[2]</span></a></sup>：</p><p>1、若 $n$ 为合数，$d$ 为其大于1的最小因子，则  $d \leq \sqrt{n}$  。（注意到 $\frac{n}{d}$ 为小于 $n$ 的最大因子)</p><h2 id="试除法求所有约数"><a href="#试除法求所有约数" class="headerlink" title="试除法求所有约数"></a>试除法求所有约数</h2><h3 id="算法目标"><a href="#算法目标" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，求出$N$从小到大的约数。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>与 <code>试除法判定质数</code> 的思路类似，我们只要枚举$2$~$\sqrt{N}$中所有$N$的因数，即可求出$N$的所有因数</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i != x / i) res.<span class="hljs-built_in">push_back</span>(x / i);<br>        &#125;<br>    <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>算法模板来自<a href="https://www.acwing.com/blog/content/406/">AcWing常用代码模板4——数学知识</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>摘自<a href="https://zhuanlan.zhihu.com/p/41337006">初等数论学习笔记（一）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技巧总结</category>
      
      <category>数学知识</category>
      
      <category>数论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 USACO2.1 健康的荷斯坦奶牛 Healthy Holsteins</title>
    <link href="/2021/05/16/%E9%A2%98%E8%A7%A3%20USACO2.1%20%E5%81%A5%E5%BA%B7%E7%9A%84%E8%8D%B7%E6%96%AF%E5%9D%A6%E5%A5%B6%E7%89%9B%20Healthy%20Holsteins/"/>
    <url>/2021/05/16/%E9%A2%98%E8%A7%A3%20USACO2.1%20%E5%81%A5%E5%BA%B7%E7%9A%84%E8%8D%B7%E6%96%AF%E5%9D%A6%E5%A5%B6%E7%89%9B%20Healthy%20Holsteins/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-USACO2-1-健康的荷斯坦奶牛-Healthy-Holsteins"><a href="#题解-USACO2-1-健康的荷斯坦奶牛-Healthy-Holsteins" class="headerlink" title="题解 USACO2.1 健康的荷斯坦奶牛 Healthy Holsteins"></a>题解 USACO2.1 健康的荷斯坦奶牛 Healthy Holsteins</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1460">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/1364/">AcWing</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>选择最小的 $p$ 个饲料，使得每一项维他命含量均大于所需最小维他命含量</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>采用 <code>dfs</code> 算法，按顺序枚举所有可能情况，如果满足则对比所需饲料数，若小于当前最小数，则更新变量 $p$ 并退出循环，最后输出答案。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">30</span>, M = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> v, g, p = M, n;<br><span class="hljs-keyword">int</span> need[N], have[M][N], now[N];<br>bitset &lt;M&gt; food;<br>bitset &lt;M&gt; st;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v; i ++ ) <span class="hljs-keyword">if</span> (now[i] &gt;= need[i]) cnt ++ ;<br>    <span class="hljs-keyword">if</span> (cnt == v) &#123;<br>        <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">count</span>() &lt; p) &#123;<br>            p = st.<span class="hljs-built_in">count</span>();<br>            food.<span class="hljs-built_in">reset</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g; i ++ ) <span class="hljs-keyword">if</span> (st[i]) food.<span class="hljs-built_in">set</span>(i, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x; i &lt; g; i ++ ) &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++ ) now[j] += have[i][j];<br>            st.<span class="hljs-built_in">set</span>(i, <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">dfs</span>(i);<br>            st.<span class="hljs-built_in">set</span>(i, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++ ) now[j] -= have[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v; i ++ ) cin &gt;&gt; need[i];<br>    cin &gt;&gt; g;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++ )<br>            cin &gt;&gt; have[i][j];<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <br>    cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g; i ++ ) <span class="hljs-keyword">if</span> (food[i]) cout &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>普及-</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 CF14A Letter</title>
    <link href="/2021/04/22/%E9%A2%98%E8%A7%A3%20CF14A%20Letter/"/>
    <url>/2021/04/22/%E9%A2%98%E8%A7%A3%20CF14A%20Letter/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-CF14A-Letter"><a href="#题解-CF14A-Letter" class="headerlink" title="题解 CF14A Letter"></a>题解 CF14A Letter</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/CF14A">洛谷</a></li><li><a href="http://codeforces.com/problemset/problem/14/A">Codeforces</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>给定一 $N \times M$规模的矩阵，输出最小的包含所有 <code>*</code> 的矩阵。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>一道模拟题</p><p>找出符合题意的矩阵仅需找出左上角的点与右下角的点，左上角的点横纵坐标为所有 <code>*</code> 的横纵坐标的最小值，右下角的点横纵坐标为所有 <code>*</code> 的横纵坐标的最大值，因此只要判断所有 <code>*</code> 即可。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">105</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">char</span> matrix[N][N];<br><br>PII l, r;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br>l.first = N, l.second = N;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ ) &#123;<br>cin &gt;&gt; matrix[i][j];<br><span class="hljs-keyword">if</span> (matrix[i][j] == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>l.first = <span class="hljs-built_in">min</span>(l.first, i);<br>l.second = <span class="hljs-built_in">min</span>(l.second, j);<br>r.first = <span class="hljs-built_in">max</span>(r.first, i);<br>r.second = <span class="hljs-built_in">max</span>(r.second, j);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l.first; i &lt;= r.first; i ++ ) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l.second; j &lt;= r.second; j ++ ) cout &lt;&lt; matrix[i][j];<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 CF11A Increasing Sequence</title>
    <link href="/2021/04/18/%E9%A2%98%E8%A7%A3%20CF11A%20Increasing%20Sequence/"/>
    <url>/2021/04/18/%E9%A2%98%E8%A7%A3%20CF11A%20Increasing%20Sequence/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题解-CF11A-Increasing-Sequence"><a href="#题解-CF11A-Increasing-Sequence" class="headerlink" title="题解 CF11A Increasing Sequence"></a>题解 CF11A Increasing Sequence</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/CF11A">洛谷</a></li><li><a href="http://codeforces.com/problemset/problem/11/A">Codeforces</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>把数列中一个数加上 $d$ 算作一次操作，求最少几次操作能把这个数列变为递增数列。</p><p>递增数列：数列后一项皆比前一项大。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><del>水平不够，只能水一水入门题</del></p><p>这题可以直接模拟，但大数据会TLE，因此必须采用 <code>(l - r) / d + 1</code> 的计算公式进行快速求解。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br>ll l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>ll res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, d;<br>    cin &gt;&gt; n &gt;&gt; d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) &#123;<br>        cin &gt;&gt; r;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) &#123;<br>            res += (l - r) / d + <span class="hljs-number">1</span>;<br>            l = ((l - r) / d + <span class="hljs-number">1</span>) * d + r;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            l = r;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数论1</title>
    <link href="/2021/04/04/%E6%95%B0%E8%AE%BA1/"/>
    <url>/2021/04/04/%E6%95%B0%E8%AE%BA1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数论1"><a href="#数论1" class="headerlink" title="数论1"></a>数论1</h1><blockquote><p>质数专题</p></blockquote><h2 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h2><h3 id="关于质数（素数）"><a href="#关于质数（素数）" class="headerlink" title="关于质数（素数）"></a>关于质数（素数）</h3><p>素数的性质<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="摘自初等数论学习笔记（一）">[2]</span></a></sup>：</p><p>1、一个大于1的正整数的大于1的最小因子为素数。</p><p>这条性质看上去十分简单，然而在之后<strong>构造素数</strong>进行证明时十分常用。</p><p>合数的性质：</p><p>1、若 $n$ 为合数，$d$ 为其大于1的最小因子，则  $d \leq \sqrt{n}$  。（注意到 $\frac{n}{d}$ 为小于 $n$ 的最大因子)</p><h2 id="试除法判定质数"><a href="#试除法判定质数" class="headerlink" title="试除法判定质数"></a>试除法判定质数</h2><h3 id="算法目标"><a href="#算法目标" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，判断$N$是否为质数。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>任意一个质数$N$都只能被$1$和$N$整除，因此只应枚举$2$~$N-1$中的所有数，只要其中有一个不符合，便可判定$N$不是质数。</p><p>接下来在对上述思路优化，先来看个例子：</p><script type="math/tex; mode=display">\begin{align}30 & = 2 \times 15 \\    & = 3 \times 10 \\   & = 5 \times 6\end{align}</script><p>通过这个例子我们可以发现一个数的因数成对出现，即 <code>2，3，5</code> 均小于$\sqrt{30}$， <code>15，10，6</code> 均大于$\sqrt{30}$，因此只要$2$~$\sqrt{N}$中无$N$的因数，$N$就是一个质数。</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="试除法分解质因数"><a href="#试除法分解质因数" class="headerlink" title="试除法分解质因数"></a>试除法分解质因数</h2><h3 id="算法目标-1"><a href="#算法目标-1" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，将$N$从小到大分解质因数。</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>从小到大枚举$N$的所有最小质因子，对于特大的质因子，可采用试除法判定质数的思路进行优化，即只要枚举$2$~$\sqrt{N}$中所有$N$的因数，如果最后 $N&gt;0$，即$N$是质数。</p><h3 id="算法模板-1"><a href="#算法模板-1" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i, s ++ ;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="朴素筛法求质数（埃氏筛法）"><a href="#朴素筛法求质数（埃氏筛法）" class="headerlink" title="朴素筛法求质数（埃氏筛法）"></a>朴素筛法求质数（埃氏筛法）</h2><h3 id="算法目标-2"><a href="#算法目标-2" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，筛选出$1$~$N$中所有的质数。</p><h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a>算法思路</h3><p>因为质数的倍数都是合数，因此只要枚举到质数 $n$，便可将 $2n$~$N$ 间所有 $n$ 的倍数筛去，最后剩下的必然都是质数。</p><p>但是，该算法对于有 $k$ 个不同质因子的数，会被重复筛去 $k$ 次，因此当 $N \geq 10^7$ 时，该算法速度将显著放慢</p><h3 id="算法模板-2"><a href="#算法模板-2" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性筛法求质数"><a href="#线性筛法求质数" class="headerlink" title="线性筛法求质数"></a>线性筛法求质数</h2><h3 id="算法目标-3"><a href="#算法目标-3" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，筛选出$1$~$N$中所有的质数。</p><h3 id="算法思路-3"><a href="#算法思路-3" class="headerlink" title="算法思路"></a>算法思路</h3><p>任意一个质数都由其最小质因子和其除本身外的最大因子构成，因此，对于每个合数，可用其最小质因子筛掉。</p><p>例如，对于合数 $385$ 可采用以下方式分解：</p><script type="math/tex; mode=display">\begin{align}385 & = 5 \times 7 \times 11 \\    & = 5 \times 77 \\\end{align}</script><p>如上可以发现，$77 = 5 \times 11$ ，$77$ 分解质因数后的最小质因子大于质数 $5$ ，因此合数 $385$ 被 $5$ 和 $77$ 分解符合上述思路。</p><p>总结一下，枚举 $2$~$n$ 间的所有整数 $i$，若$2$~$i$的最大质因子间还存在一质数 $p$ ，即 $pi$ 为合法的合数，并可将它筛掉。</p><h3 id="算法模板-3"><a href="#算法模板-3" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>算法模板来自<a href="https://www.acwing.com/blog/content/406/">AcWing常用代码模板4——数学知识</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>摘自<a href="https://zhuanlan.zhihu.com/p/41337006">初等数论学习笔记（一）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技巧总结</category>
      
      <category>数学知识</category>
      
      <category>数论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
