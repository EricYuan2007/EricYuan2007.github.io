<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>题解 USACO2.1 健康的荷斯坦奶牛 Healthy Holsteins</title>
    <link href="/2021/05/16/%E9%A2%98%E8%A7%A3%20USACO2.1%20%E5%81%A5%E5%BA%B7%E7%9A%84%E8%8D%B7%E6%96%AF%E5%9D%A6%E5%A5%B6%E7%89%9B%20Healthy%20Holsteins/"/>
    <url>/2021/05/16/%E9%A2%98%E8%A7%A3%20USACO2.1%20%E5%81%A5%E5%BA%B7%E7%9A%84%E8%8D%B7%E6%96%AF%E5%9D%A6%E5%A5%B6%E7%89%9B%20Healthy%20Holsteins/</url>
    
    <content type="html"><![CDATA[<h1 id="题解-USACO2-1-健康的荷斯坦奶牛-Healthy-Holsteins"><a href="#题解-USACO2-1-健康的荷斯坦奶牛-Healthy-Holsteins" class="headerlink" title="题解 USACO2.1 健康的荷斯坦奶牛 Healthy Holsteins"></a>题解 USACO2.1 健康的荷斯坦奶牛 Healthy Holsteins</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/P1460">洛谷</a></li><li><a href="https://www.acwing.com/problem/content/1364/">AcWing</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>选择最小的 $p$ 个饲料，使得每一项维他命含量均大于所需最小维他命含量</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>采用 <code>dfs</code> 算法，按顺序枚举所有可能情况，如果满足则对比所需饲料数，若小于当前最小数，则更新变量 $p$ 并退出循环，最后输出答案。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">30</span>, M = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> v, g, p = M, n;<br><span class="hljs-keyword">int</span> need[N], have[M][N], now[N];<br>bitset &lt;M&gt; food;<br>bitset &lt;M&gt; st;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v; i ++ ) <span class="hljs-keyword">if</span>(now[i] &gt;= need[i]) cnt ++ ;<br>    <span class="hljs-keyword">if</span> (cnt == v) &#123;<br>        <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">count</span>() &lt; p) &#123;<br>            p = st.<span class="hljs-built_in">count</span>();<br>            food.<span class="hljs-built_in">reset</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g; i ++ ) <span class="hljs-keyword">if</span> (st[i]) food.<span class="hljs-built_in">set</span>(i, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x; i &lt; g; i ++ ) &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++ ) now[j] += have[i][j];<br>            st.<span class="hljs-built_in">set</span>(i, <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">dfs</span>(i);<br>            st.<span class="hljs-built_in">set</span>(i, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++ ) now[j] -= have[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v; i ++ ) cin &gt;&gt; need[i];<br>    cin &gt;&gt; g;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v; j ++ )<br>            cin &gt;&gt; have[i][j];<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <br>    cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; g; i ++ ) <span class="hljs-keyword">if</span>(food[i]) cout &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dfs</tag>
      
      <tag>普及-</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 CF14A Letter</title>
    <link href="/2021/04/22/%E9%A2%98%E8%A7%A3%20CF14A%20Letter/"/>
    <url>/2021/04/22/%E9%A2%98%E8%A7%A3%20CF14A%20Letter/</url>
    
    <content type="html"><![CDATA[<h1 id="题解-CF14A-Letter"><a href="#题解-CF14A-Letter" class="headerlink" title="题解 CF14A Letter"></a>题解 CF14A Letter</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/CF14A">洛谷</a></li><li><a href="http://codeforces.com/problemset/problem/14/A">Codeforces</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>给定一 $N \times M$规模的矩阵，输出最小的包含所有 <code>*</code> 的矩阵。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>一道模拟题</p><p>找出符合题意的矩阵仅需找出左上角的点与右下角的点，左上角的点横纵坐标为所有 <code>*</code> 的横纵坐标的最小值，右下角的点横纵坐标为所有 <code>*</code> 的横纵坐标的最大值，因此只要判断所有 <code>*</code> 即可。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">105</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-keyword">char</span> matrix[N][N];<br><br>PII l, r;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br>l.first = N, l.second = N;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ ) &#123;<br>cin &gt;&gt; matrix[i][j];<br><span class="hljs-keyword">if</span> (matrix[i][j] == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>l.first = <span class="hljs-built_in">min</span>(l.first, i);<br>l.second = <span class="hljs-built_in">min</span>(l.second, j);<br>r.first = <span class="hljs-built_in">max</span>(r.first, i);<br>r.second = <span class="hljs-built_in">max</span>(r.second, j);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l.first; i &lt;= r.first; i ++ ) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l.second; j &lt;= r.second; j ++ ) cout &lt;&lt; matrix[i][j];<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解 CF11A Increasing Sequence</title>
    <link href="/2021/04/18/%E9%A2%98%E8%A7%A3%20CF11A%20Increasing%20Sequence/"/>
    <url>/2021/04/18/%E9%A2%98%E8%A7%A3%20CF11A%20Increasing%20Sequence/</url>
    
    <content type="html"><![CDATA[<h1 id="题解-CF11A-Increasing-Sequence"><a href="#题解-CF11A-Increasing-Sequence" class="headerlink" title="题解 CF11A Increasing Sequence"></a>题解 CF11A Increasing Sequence</h1><h2 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h2><ol><li><a href="https://www.luogu.com.cn/problem/CF11A">洛谷</a></li><li><a href="http://codeforces.com/problemset/problem/11/A">Codeforces</a></li></ol><h2 id="题目与题意"><a href="#题目与题意" class="headerlink" title="题目与题意"></a>题目与题意</h2><p>把数列中一个数加上 $d$ 算作一次操作，求最少几次操作能把这个数列变为递增数列。</p><p>递增数列：数列后一项皆比前一项大。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><del>水平不够，只能水一水入门题</del></p><p>这题可以直接模拟，但大数据会TLE，因此必须采用 <code>(l - r) / d + 1</code> 的计算公式进行快速求解。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><br>ll l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>ll res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, d;<br>    cin &gt;&gt; n &gt;&gt; d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) &#123;<br>        cin &gt;&gt; r;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) &#123;<br>            res += (l - r) / d + <span class="hljs-number">1</span>;<br>            l = ((l - r) / d + <span class="hljs-number">1</span>) * d + r;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            l = r;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数论1</title>
    <link href="/2021/04/04/%E6%95%B0%E8%AE%BA1/"/>
    <url>/2021/04/04/%E6%95%B0%E8%AE%BA1/</url>
    
    <content type="html"><![CDATA[<h1 id="数论1"><a href="#数论1" class="headerlink" title="数论1"></a>数论1</h1><blockquote><p>质数专题</p></blockquote><h2 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h2><h3 id="关于质数（素数）"><a href="#关于质数（素数）" class="headerlink" title="关于质数（素数）"></a>关于质数（素数）</h3><p>素数的性质<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="摘自初等数论学习笔记（一）">[2]</span></a></sup>：</p><p>1、一个大于1的正整数的大于1的最小因子为素数。</p><p>这条性质看上去十分简单，然而在之后<strong>构造素数</strong>进行证明时十分常用。</p><p>2、若 $n$ 为合数，$d$ 为其大于1的最小因子，则  $d \leq \sqrt{n}$  。（注意到 $\frac{n}{d}$ 为小于 $n$ 的最大因子)</p><h2 id="试除法判定质数"><a href="#试除法判定质数" class="headerlink" title="试除法判定质数"></a>试除法判定质数</h2><h3 id="算法目标"><a href="#算法目标" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，判断$N$是否为质数。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>任意一个质数$N$都只能被$1$和$N$整除，因此只应枚举$2$~$N-1$中的所有数，只要其中有一个不符合，便可判定$N$不是质数。</p><p>接下来在对上述思路优化，先来看个例子：</p><script type="math/tex; mode=display">\begin{align}30 & = 2 \times 15 \\    & = 3 \times 10 \\   & = 5 \times 6\end{align}</script><p>通过这个例子我们可以发现一个数的因数成对出现，即 <code>2，3，5</code> 均小于$\sqrt{30}$， <code>15，10，6</code> 均大于$\sqrt{30}$，因此只要$2$~$\sqrt{N}$中无$N$的因数，$N$就是一个质数。</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="试除法分解质因数"><a href="#试除法分解质因数" class="headerlink" title="试除法分解质因数"></a>试除法分解质因数</h2><h3 id="算法目标-1"><a href="#算法目标-1" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，将$N$从小到大分解质因数。</p><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>从小到大枚举$N$的所有最小质因子，对于特大的质因子，可采用试除法判定质数的思路进行优化，即只要枚举$2$~$\sqrt{N}$中所有$N$的因数，如果最后 $N&gt;0$，即$N$是质数。</p><h3 id="算法模板-1"><a href="#算法模板-1" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i, s ++ ;<br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="朴素筛法求质数（埃氏筛法）"><a href="#朴素筛法求质数（埃氏筛法）" class="headerlink" title="朴素筛法求质数（埃氏筛法）"></a>朴素筛法求质数（埃氏筛法）</h2><h3 id="算法目标-2"><a href="#算法目标-2" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，筛选出$1$~$N$中所有的质数。</p><h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a>算法思路</h3><p>因为质数的倍数都是合数，因此只要枚举到质数 $n$，便可将 $2n$~$N$ 间所有 $n$ 的倍数筛去，最后剩下的必然都是质数。</p><p>但是，该算法对于有 $k$ 个不同质因子的数，会被重复筛去 $k$ 次，因此当 $N \geq 10^7$ 时，该算法速度将显著放慢</p><h3 id="算法模板-2"><a href="#算法模板-2" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (st[i]) <span class="hljs-keyword">continue</span>;<br>        primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性筛法求质数"><a href="#线性筛法求质数" class="headerlink" title="线性筛法求质数"></a>线性筛法求质数</h2><h3 id="算法目标-3"><a href="#算法目标-3" class="headerlink" title="算法目标"></a>算法目标</h3><p>给定任意一个整数$N$，筛选出$1$~$N$中所有的质数。</p><h3 id="算法思路-3"><a href="#算法思路-3" class="headerlink" title="算法思路"></a>算法思路</h3><p>任意一个质数都由其最小质因子和其除本身外的最大因子构成，因此，对于每个合数，可用其最小质因子筛掉。</p><p>例如，对于合数 $385$ 可采用以下方式分解：</p><script type="math/tex; mode=display">\begin{align}385 & = 5 \times 7 \times 11 \\    & = 5 \times 77 \\\end{align}</script><p>如上可以发现，$77 = 5 \times 11$ ，$77$ 分解质因数后的最小质因子大于质数 $5$ ，因此合数 $385$ 被 $5$ 和 $77$ 分解符合上述思路。</p><p>总结一下，枚举 $2$~$n$ 间的所有整数 $i$，若$2$~$i$的最大质因子间还存在一质数 $p$ ，即 $pi$ 为合法的合数，并可将它筛掉。</p><h3 id="算法模板-3"><a href="#算法模板-3" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-keyword">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>算法模板来自<a href="https://www.acwing.com/blog/content/406/">AcWing常用代码模板4——数学知识</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>摘自<a href="https://zhuanlan.zhihu.com/p/41337006">初等数论学习笔记（一）</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>数学知识</category>
      
      <category>数论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
